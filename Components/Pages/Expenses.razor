@page "/expenses"
@using MyFinances.Models
@using MyFinances.Services
@inject ExpenseCategorizationService CategorizationService
@inject ExpenseAnalysisService AnalysisService
@inject IExpenseClient ExpenseClient

<PageTitle>Expenses</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Expenses</MudText>
    
    
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-4">Expenses</MudText>
        <MudTable Items="@_expenses" Dense="false" Hover="true" Bordered="true" Striped="false">
            <HeaderContent>
                <MudTh>Description</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Category</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteExpense(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" Class="mb-4">Category Distribution by Group</MudText>
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@_categoryData" InputLabels="@_categoryLabels"></MudChart>
    </MudPaper>
</MudContainer>

@code {
    private List<Expense> _expenses = new();
    private double[] _categoryData = Array.Empty<double>();
    private string[] _categoryLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // Get expenses from client
        _expenses = await ExpenseClient.GetExpensesAsync();

        // Categorize each expense
        foreach (var expense in _expenses)
        {
            expense.Category = await CategorizationService.CategorizeExpenseAsync(expense);
        }

        // Get category distribution data
        var (data, labels) = AnalysisService.GetCategoryDistributionData(_expenses);
        _categoryData = data;
        _categoryLabels = labels;
    }

    private async Task DeleteExpense(Expense expense)
    {
        await ExpenseClient.DeleteExpenseAsync(expense);
        _expenses.Remove(expense);
        
        // Update category distribution data
        var (data, labels) = AnalysisService.GetCategoryDistributionData(_expenses);
        _categoryData = data;
        _categoryLabels = labels;
    }
}
